--- 
layout: post
title: Remarkable
tags: 
- desarrollo
- ruby
- rails
- testing
---
%p Rspec es genial. Out-of-the-box te provee unos "meta-matchers" bastante piolas. Si ten&eacute;s un m&eacute;todo que retorne un boolean y termine en ? pod&eacute;s preguntar algo como esto:

:coderay
  #!ruby
  describe User do
    # suponiendo que @user responde a admin?
    subject { User.new }
    it { should be_admin } 
  end

%p 
  S&uacute;per copado, pero nada nuevo. Claro, cuando te empez&aacute;s a meter un poco m&aacute;s, descubr&iacute;s que muchas de los matchers que us&aacute;s siempre, alguien ya las "meti&oacute;" en un m&oacute;dulo y las puso disponibles para todos. Dos ejemplos de ello son #{link_to("rspec_on_rails_matchers", "http://github.com/joshknowles/rspec-on-rails-matchers/tree/master")} (buen inicio, pero se qued&oacute; en el tiempo) y #{link_to("shoulda", "http://thoughtbot.com/projects/shoulda/")} (que es excelente).

%p 
  La cuesti&oacute;n es que despu&eacute;s de usar shoulda una semana, di con #{link_to("Remarkable", "http://remarkable.rubyforge.org/")} (luego de escuchar, creo, a los pibes de #{link_to("RailsEnvy", "http://www.railsenvy.com")} .

%p 
  Remarkable es una gema que incluye espectations y matchers para usar dentro y fuera de rails. La lista es interminable, pero voy a hacer un mini-raconto de lo que estuve usando esta semana (con un supuesto modelo User):

:coderay
  #!ruby
  describe User
    subject { Factory.build(:user) }
    it { should validate_presence_of(:first_name) }
    it { should validate_presence_of(:last_name) }
    it { should have_many(:posts) }
  end

  describe Post
    subject { Factory.build(:post) }
    # Db matchers
    it { should have_columns(:title, :body, :permalink)}
    it { should have_index([:title]).unique(true) 
  
    # Validaciones Active Record
    it { should validate_presence_of(:title) }
    it { should validate_uniqueness_of(:title, :scope => 'topic') }
    it { should validate_uniqueness_of :title, :allow_blank => true} 
 
    # Relaciones 
    # se verificar&aacute; que el counter cache se incluya como opci&oacute;n y 
    # que el campo est&eacute; definido en la DB. 
    # No hay una en que no me olvide de esto. 
    it { should belong_to(:topic, :counter_cache => true) }
    it { should belong_to(:user, :counter_cache => true) } 
    # se verificar&aacute; que se incluya el :through como opci&oacute;n 
    # adem&aacute;s de que exista la relaci&oacute;n.
    it { should have_many(:comments) }
    it { should have_many(:viewers, :through => :comments) }

    # named scopes
    it { should have_scope(:published).conditions(:published => true) }

    # acepta colecciones c&oacute;mo par&aacute;metros
    it { should allow_mass_assignment_of(:title, :body, :tags, :permalink) }
  end

%p Adem&aacute;s de esto, podemos integrarlo con I18n y generar los specs en castellano, u otro idioma. Funciona exactamente igual que Rails, ya que usa la misma gema (svenfuchs-i18n). O sea, nuestro cliente no tiene que saber ingl&eacute;s para entender nuestros specs. Esto, por lo menos para mi, es oro puro. 

%p Como si esto fuera poco, adem&aacute;s provee un forma de crear matchers muy f&aacute;cilmente (un mini DSL), #{link_to("sin reinventar la rueda", "http://remarkable.rubyforge.org/core/")}.

%p En el ejemplo yo solo habl&eacute; de la parte de Active Record, pero tambi&eacute;n incluye un mont&oacute;n de matchers para el ActionController y pr&oacute;ximamente para ActionView tambi&eacute;n (#{link_to("Ac&aacute;", "http://remarkable.rubyforge.org/rails")}).

%h2 Instalaci&oacute;n

sudo gem install remarkable_rails

%p En Rails 2.3, para que Remarkable se cargue correctamente hay que incluir lo siguiente en config/environments/test.rb

:coderay
  #!ruby
  config.gem "rspec",            :lib => false
  config.gem "rspec-rails",      :lib => false
  config.gem "remarkable_rails", :lib => false

%p Y despu&eacute;s requerir remarkable dentro de spec_helper.rb, justo despu&eacute;s de "spec/rails":

:coderay
  #!ruby
  require 'spec/rails'
  require 'remarkable_rails'

%p Para mi result&oacute; muy &uacute;til, y no veo raz&oacute;n alguna para no usarlo de aqu&iacute; en m&aacute;s (m&aacute;s all&aacute; de incluir una nueva dependencia).

%p Si tienen la libertad de poder incluir/sugerir mejoras en sus proyectos actuales, y se cansaron de escribir siempre lo mismo, entonces prueben Remarkable. Posta, te hace la vida mucho m&aacute;s simple. Ojo, hay que pensar igual :P
